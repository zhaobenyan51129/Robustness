#!/bin/bash
# plotTConly, fitDataReady/plotOnly, readNewSpike
# set -e
source /root/miniconda3/etc/profile.d/conda.sh
eval "$(conda shell.bash hook)"
conda activate general

repo=$HOME/repos/patchV1
cfg_fdr=${repo}/src
fdr0=/root/autodl-tmp/ljy
res_fdr=/root/autodl-tmp/ljy/resource_repeat # stimulus, V1-static and LGN-static files
setup_fdr=$fdr0/resource_repeat # inputFolder in cfg
data_fdr=$fdr0/data_repeat # outputFolder in cfg

fitTC=True
nOri=6 # total # orientaton if applicable
# nOri=220 # total # orientaton if applicable
TF=8 # input frequency if applicable
SF=20
trial_suffix=repeat_10
bin_prefix=sample_OutAndInputCount_ 
singleOri=False
# singleOri=True
one_ori=1 #控制从第几个开始

res_suffix=minimal-patch
patch=patch_fast

generate_V1_connection=False
generate_LGN_V1_connection=False

patch_cfg=minimal_repeat.cfg

LGN_V1_suffix=test_lgn
V1_connectome_suffix=test_v1

retino_cfg=LGN_V1.cfg
genCon_cfg=connectome.cfg

OPstatus=1 
usePrefData=False # use fitted preference from plotTC replot plotV1_response.py
collectMeanDataOnly=False # no plots, just collect average data

fig_fdr=${fdr0}/repeat/${trial_suffix} # figures and configs

echo ${trial_suffix}

plotTConly=$1
if [ -z "${plotTConly}" ]; 
then
	plotTConly=False
fi

if [ "$plotTConly" = True ];
then
	fitDataReady=$2
	if [ -z "$fitDataReady" ]; 
	then
		fitDataReady=False
	fi
else
	plotOnly=$2
	if [ -z "$plotOnly" ]; 
	then
		plotOnly=False
        if [ "$generate_LGN_V1_connection" = True ];
        then
            cd $setup_fdr 
            retino -c ${cfg_fdr}/${retino_cfg}
            cd ${cfg_fdr}
        fi
        if [ "$generate_V1_connection" = True ];
        then
            cd $setup_fdr 
            genCon -c ${cfg_fdr}/${genCon_cfg}
            cd ${cfg_fdr}
        fi
	fi
	if [ "$plotOnly" = True ]; 
    then
		readNewSpike=$3
		if [ -z "${readNewSpike}" ]; 
		then
			readNewSpike=True
		fi
	else
		readNewSpike=True
	fi
	fitDataReady=False
fi

if [ -d "$data_fdr" ]
then
	echo overwrite contents in $data_fdr
else
	mkdir -p $data_fdr	
fi

if [ -d "$fig_fdr" ]
then
	echo overwrite contents in $fig_fdr
else
	mkdir -p $fig_fdr	
fi

if [ ! -d "${fig_fdr}/log" ]
then
	mkdir -p ${fig_fdr}/log
fi

cp ${cfg_fdr}/patchTC ${fig_fdr}/patchTC_${trial_suffix}
cp ${cfg_fdr}/${patch_cfg} ${fig_fdr}/patch_${trial_suffix}.cfg

if [ "${generate_LGN_V1_connection}" = True ]
then
	cp ${cfg_fdr}/${retino_cfg} ${fig_fdr}/retino_${LGN_V1_suffix}.cfg
fi
if [ "${generate_V1_connection}" = True ]
then
	cp ${cfg_fdr}/${genCon_cfg} ${fig_fdr}/genCon_${V1_connectome_suffix}.cfg
	cp ${repo}/src/connections.py ${fig_fdr}/connections_${V1_connectome_suffix}.py
fi
echo configuration files copied

cp ${repo}/src/plotV1_response.py ${fig_fdr}/plotV1_response_${trial_suffix}.py
cp ${repo}/src/plotLGN_response.py ${fig_fdr}/plotLGN_response_${trial_suffix}.py
cp ${repo}/src/plotFrameOutput.py ${fig_fdr}/plotFrameOutput_${trial_suffix}.py
cp ${repo}/src/plotLGN_gallery.py ${fig_fdr}/plotLGN_gallery_${trial_suffix}.py
cp ${repo}/src/generate_input.py ${fig_fdr}/generate_input_${trial_suffix}.py

if [ "$singleOri" = False ]; then
	cp ${repo}/src/getTuningCurve.py ${fig_fdr}/getTuningCurve_${trial_suffix}.py
else
    echo one_ori=$one_ori
fi
echo plotting files copied

# set -e
jobList=""
export plotOnly
export nOri
export TF
export res_fdr
export setup_fdr
export data_fdr
export fig_fdr
export res_suffix
export trial_suffix
export LGN_V1_suffix
export V1_connectome_suffix
export fitTC
export collectMeanDataOnly
export fitDataReady 
export patch
export usePrefData
export readNewSpike
export generate_V1_connection
export singleOri
export plotOnly

date=$(eval date +"%Y_%m_%d_%H-%M-%S")

if [ "$plotTConly" = False ]; then
	if [ "$singleOri" = False ]; then
		if [ "$plotOnly" = False ]; then
			cp ${cfg_fdr}/${patch_cfg} ${fig_fdr}/${trial_suffix}-ori_${one_ori}.cfg
			cp ${fig_fdr}/${trial_suffix}-ori_${one_ori}.cfg ${fig_fdr}/${trial_suffix}-ori_$((one_ori+1)).cfg
		fi

		jobID=""
		k=0
		for ori in $( seq $one_ori $nOri )
		do
			# check 1200
			# RETURN=$?
			# while [ $RETURN -eq 1 ];  
			# do  
			# sleep 1
			# check 1200
			# RETURN=$?			
			# done
			export ori
			./ori.sh > ${fig_fdr}/log/pOri_${date}_${trial_suffix}_${ori}_${plotOnly}.out 2>&1 &
			jobID+="${!} "
			# wait $jobID
			if [ "$plotOnly" = False ]; then
				if [ "${ori}" -lt "${nOri}" ]; then
					vim -s ${cfg_fdr}/nextOri_random_cfg.keys ${fig_fdr}/${trial_suffix}-ori_$((ori+1)).cfg
					if [ "$((ori+1))" -lt "${nOri}" ]; then
						cp ${fig_fdr}/${trial_suffix}-ori_$((ori+1)).cfg ${fig_fdr}/${trial_suffix}-ori_$((ori+2)).cfg
					fi
				fi
			fi
			# k=$((k+1))
			# if [ $k -eq 2 ];then
			# 	k=0
			# 	echo $ori
			# 	wait $jobID
			# 	echo python ${fig_fdr}/c_${trial_suffix}.py ${trial_suffix}_1 ${trial_suffix} ${res_suffix} ${LGN_V1_suffix} ${V1_connectome_suffix} ${res_fdr} ${setup_fdr} ${data_fdr} ${TF} $((ori-1)) ${bin_prefix}
			# 	python ${fig_fdr}/generate_input_${trial_suffix}.py ${trial_suffix}_1 ${trial_suffix} ${res_suffix} ${LGN_V1_suffix} ${V1_connectome_suffix} ${res_fdr} ${setup_fdr} ${data_fdr} ${TF} $((ori-1)) ${bin_prefix} &
			# 	echo python ${fig_fdr}/generate_input_${trial_suffix}.py ${trial_suffix}_1 ${trial_suffix} ${res_suffix} ${LGN_V1_suffix} ${V1_connectome_suffix} ${res_fdr} ${setup_fdr} ${data_fdr} ${TF} ${ori} ${bin_prefix}
			# 	python ${fig_fdr}/generate_input_${trial_suffix}.py ${trial_suffix}_1 ${trial_suffix} ${res_suffix} ${LGN_V1_suffix} ${V1_connectome_suffix} ${res_fdr} ${setup_fdr} ${data_fdr} ${TF} ${ori} ${bin_prefix} &
			# 	jobID=""
			# fi
		done
		wait $jobID
		# ./plotTC.sh > ${fig_fdr}/log/pTC_${date}_${trial_suffix}.out &
		job=$!
	else
		ori=$one_ori
		if [ "$plotOnly" = False ]; then
			cp ${cfg_fdr}/${patch_cfg} ${fig_fdr}/${trial_suffix}-ori_${ori}.cfg
		fi
		export ori
		./ori.sh > ${fig_fdr}/log/pSingle_${date}_${trial_suffix}_${ori}_${plotOnly}.out 2>&1 &
		job=$!
	fi
else
	./plotTC.sh > ${fig_fdr}/log/pTC_${date}_${trial_suffix}.out 2>&1 &
	job=$!
fi

(wait $job && shutdown) &
